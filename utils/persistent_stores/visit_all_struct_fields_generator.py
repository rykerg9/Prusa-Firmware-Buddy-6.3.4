import argparse


def main():
    parser = argparse.ArgumentParser(prog="visit_all_struct_fields_generator")
    parser.add_argument("num_of_cases",
                        type=int,
                        help="Number of cases to generate")
    args = parser.parse_args()
    num_of_cases = args.num_of_cases

    with open("visit_all_struct_fields.hpp", "w") as file:
        file.write(f"""
// Auto-generated by visit_all_struct_fields_generator.py

#pragma once

#include <common/aggregate_arity.hpp>

#define f(px) visitor(px, std::forward<Args>(args)...);

/// Calls visitor(field, args...) on each struct member
template <typename T, typename Visitor, typename... Args>
constexpr void visit_all_struct_fields(T &t, Visitor visitor, Args&&... args) {{
	static constexpr auto arity = aggregate_arity<T>();
    static_assert(arity < {num_of_cases}, "visit_all_struct_fields_generator needs to be called with with larger arity");

 	""")

        for i in range(1, num_of_cases):
            params = ", ".join([f"p{j}" for j in range(i)])
            if i > 1:
                file.write(" else")

            file.write(f""" if constexpr(arity == {i}) {{
		auto &[{params}] = t;
		""")
            for j in range(i):
                file.write(f"f(p{j}) ")

            file.write("\n\n	}")

        file.write(f"""
}}

#undef f
""")


if __name__ == "__main__":
    main()
